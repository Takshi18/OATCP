#include <iostream>
#include <vector>
using namespace std;

const int N = sizeof(unsigned int) * 8; // Number of bits in unsigned int

vector<unsigned int> preprocess_grid(const vector<vector<int>>& grid, int n) {
    vector<unsigned int> processed_grid(n * ((n + N - 1) / N), 0);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == 1) {
                processed_grid[i * ((n + N - 1) / N) + j / N] |= (1U << (j % N));
            }
        }
    }
    return processed_grid;
}

int count_subgrid(const vector<unsigned int>& processed_grid, int n) {
    int subgrids = 0;
    for (int a = 0; a < n; a++) {
        for (int b = a + 1; b < n; b++) {
            int count = 0;
            for (int k = 0; k < ((n + N - 1) / N); k++) {
                unsigned int common_bits = processed_grid[a * ((n + N - 1) / N) + k] & processed_grid[b * ((n + N - 1) / N) + k];
                while (common_bits) {
                    count += common_bits & 1;
                    common_bits >>= 1;
                }
            }
            subgrids += ((count - 1) * count) / 2;
        }
    }
    return subgrids;
}

int main() {
    int n;
    cin >> n;
    vector<vector<int>> grid(n, vector<int>(n));

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            cin >> grid[i][j];
        }
    }

    vector<unsigned int> processed_grid = preprocess_grid(grid, n);
    int result = count_subgrid(processed_grid, n);

    cout << result << endl;

    return 0;
}
